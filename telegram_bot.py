"""
telegram_bot.py - Telegram Bot ch√≠nh cho Ch·ªâ S·ªë T√¢m L√Ω Th·ªã Tr∆∞·ªùng (FIXED)
"""

import logging
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler,
    ContextTypes,
)
from telegram.constants import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import Config
from fear_greed_dashboard import FearGreedDashboard

# ===== FIX: T·∫°o th∆∞ m·ª•c TR∆Ø·ªöC KHI setup logging =====
Config.create_directories()

# Setup logging SAU KHI ƒë√£ t·∫°o th∆∞ m·ª•c
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler(os.path.join(Config.LOGS_DIR, 'bot.log')),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o scheduler KH√îNG start ngay
scheduler = AsyncIOScheduler()
dashboard = FearGreedDashboard()


def owner_only(func):
    """Decorator ƒë·ªÉ ch·ªâ cho ph√©p owner s·ª≠ d·ª•ng"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if user_id not in Config.ALLOWED_USERS:
            await update.message.reply_text(
                "üö´ **Truy c·∫≠p b·ªã t·ª´ ch·ªëi**\n\n"
                "Bot n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu.",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.warning(f"Unauthorized access attempt by user {user_id}")
            return
        
        return await func(update, context)
    return wrapper


@owner_only
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler cho /start"""
    await update.message.reply_text(
        Config.WELCOME_MESSAGE,
        parse_mode=ParseMode.MARKDOWN
    )
    logger.info(f"User {update.effective_user.id} started bot")


@owner_only
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler cho /help"""
    await update.message.reply_text(
        Config.HELP_MESSAGE,
        parse_mode=ParseMode.MARKDOWN
    )


@owner_only
async def current_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler cho /current"""
    await update.message.reply_text("‚è≥ ƒêang l·∫•y d·ªØ li·ªáu...")
    
    try:
        logger.info("Attempting to fetch data...")
        fetch_result = dashboard.fetch_data(limit=1)
        logger.info(f"Fetch result: {fetch_result}")
        
        if fetch_result:
            value = dashboard.current_value
            classification = dashboard.current_classification
            color_emoji = get_emoji_for_value(value)
            
            message = f"""
{color_emoji} **CH·ªà S·ªê T√ÇM L√ù TH·ªä TR∆Ø·ªúNG**

**Gi√° tr·ªã:** `{value}/100`
**Ph√¢n lo·∫°i:** `{classification}`
**Th·ªùi gian:** {datetime.now().strftime('%d/%m/%Y %H:%M')}

{get_interpretation(value)}
"""
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä Xem Gauge", callback_data='show_gauge'),
                    InlineKeyboardButton("üìà Xem Report", callback_data='show_report')
                ],
                [
                    InlineKeyboardButton("üì§ G·ª≠i v√†o nh√≥m", callback_data='send_to_group')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            logger.info(f"Current value sent: {value}")
        else:
            error_msg = "‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau."
            logger.error(f"Failed to fetch data. Dashboard state: {dashboard.__dict__}")
            await update.message.reply_text(error_msg)
    
    except Exception as e:
        logger.error(f"Error in current_command: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")


@owner_only
async def gauge_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler cho /gauge"""
    logger.info("=== GAUGE COMMAND STARTED ===")
    await update.message.reply_text("‚è≥ ƒêang t·∫°o gauge chart...")
    await execute_gauge_logic(update.message)


@owner_only
async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler cho /report"""
    logger.info("=== REPORT COMMAND STARTED ===")
    await update.message.reply_text("‚è≥ ƒêang t·∫°o b√°o c√°o ƒë·∫ßy ƒë·ªß...")
    await execute_report_logic(update.message)


@owner_only
async def signal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler cho /signal"""
    await update.message.reply_text("‚è≥ ƒêang ph√¢n t√≠ch t√≠n hi·ªáu...")
    await execute_signal_logic(update.message)


@owner_only
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler cho /stats"""
    await update.message.reply_text("‚è≥ ƒêang t√≠nh to√°n th·ªëng k√™...")
    
    days = 90
    if context.args and context.args[0].isdigit():
        days = int(context.args[0])
    
    await execute_stats_logic(update.message, days=days)


@owner_only
async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler cho /schedule"""
    if not context.args:
        jobs = scheduler.get_jobs()
        status = "üü¢ ƒêang b·∫≠t" if jobs else "üî¥ ƒêang t·∫Øt"
        
        message = f"""
‚è∞ **L·ªäCH G·ª¨I T·ª∞ ƒê·ªòNG**

**Tr·∫°ng th√°i:** {status}
**S·ªë job:** {len(jobs)}

**Th·ªùi gian g·ª≠i:**
"""
        for time in Config.SCHEDULE_TIMES:
            message += f"‚Ä¢ {time}\n"
        
        message += "\n**L·ªánh:**\n"
        message += "‚Ä¢ `/schedule on` - B·∫≠t l·ªãch\n"
        message += "‚Ä¢ `/schedule off` - T·∫Øt l·ªãch\n"
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
        await update.message.reply_text(
            "‚úÖ B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
            reply_markup=get_next_commands_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif context.args[0] == 'on':
        setup_schedule(context)
        await update.message.reply_text(
            "‚úÖ ƒê√£ b·∫≠t l·ªãch g·ª≠i t·ª± ƒë·ªông!\n\n"
            f"Bot s·∫Ω g·ª≠i b√°o c√°o v√†o nh√≥m l√∫c: {', '.join(Config.SCHEDULE_TIMES)}",
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info("Schedule enabled")
        
        # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
        await update.message.reply_text(
            "‚úÖ B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
            reply_markup=get_next_commands_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif context.args[0] == 'off':
        scheduler.remove_all_jobs()
        await update.message.reply_text(
            "‚úÖ ƒê√£ t·∫Øt l·ªãch g·ª≠i t·ª± ƒë·ªông!",
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info("Schedule disabled")
        
        # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
        await update.message.reply_text(
            "‚úÖ B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
            reply_markup=get_next_commands_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler cho inline keyboard buttons"""
    query = update.callback_query
    await query.answer()
    
    # Ki·ªÉm tra quy·ªÅn owner
    user_id = update.effective_user.id
    if user_id not in Config.ALLOWED_USERS:
        await query.message.reply_text("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")
        return
    
    # X·ª≠ l√Ω c√°c l·ªánh t·ª´ keyboard g·ª£i √Ω
    if query.data == 'cmd_gauge':
        await query.message.reply_text("‚è≥ ƒêang t·∫°o gauge chart...")
        await execute_gauge_logic(query.message)
        return
    
    elif query.data == 'cmd_report':
        await query.message.reply_text("‚è≥ ƒêang t·∫°o b√°o c√°o ƒë·∫ßy ƒë·ªß...")
        await execute_report_logic(query.message)
        return
    
    elif query.data == 'cmd_signal':
        await query.message.reply_text("‚è≥ ƒêang ph√¢n t√≠ch t√≠n hi·ªáu...")
        await execute_signal_logic(query.message)
        return
    
    elif query.data == 'cmd_stats':
        await query.message.reply_text("‚è≥ ƒêang t√≠nh to√°n th·ªëng k√™...")
        await execute_stats_logic(query.message, days=90)
        return
    
    elif query.data == 'cmd_schedule':
        await execute_schedule_info(query.message)
        return
    
    elif query.data == 'cmd_help':
        await query.message.reply_text(
            Config.HELP_MESSAGE,
            parse_mode=ParseMode.MARKDOWN
        )
        # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
        await query.message.reply_text(
            "‚úÖ B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
            reply_markup=get_next_commands_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # X·ª≠ l√Ω n√∫t t·ª´ /current
    if query.data == 'show_gauge':
        await query.message.reply_text("‚è≥ ƒêang t·∫°o gauge chart...")
        await execute_gauge_logic(query.message)
    
    elif query.data == 'show_report':
        await query.message.reply_text("‚è≥ ƒêang t·∫°o b√°o c√°o ƒë·∫ßy ƒë·ªß...")
        await execute_report_logic(query.message)
    
    elif query.data == 'send_to_group':
        try:
            await send_to_group(context)
            await query.message.reply_text("‚úÖ ƒê√£ g·ª≠i v√†o nh√≥m!")
            # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
            await query.message.reply_text(
                "‚úÖ B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
                reply_markup=get_next_commands_keyboard(),
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"Error sending to group from button: {e}", exc_info=True)
            await query.message.reply_text(f"‚ùå L·ªói khi g·ª≠i v√†o nh√≥m: {str(e)}")


async def execute_gauge_logic(message):
    """Logic t·∫°o gauge chart - d√πng chung cho command v√† button"""
    try:
        logger.info("=== GAUGE EXECUTION ===")
        if dashboard.fetch_data(limit=7):
            filename = os.path.join(
                Config.GAUGES_DIR, 
                f"gauge_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            )
            
            dashboard.create_simple_gauge(save_path=filename)
            
            caption = f"""
üìä **Ch·ªâ S·ªë T√¢m L√Ω Th·ªã Tr∆∞·ªùng**
Gi√° tr·ªã: {dashboard.current_value} - {dashboard.current_classification}
C·∫≠p nh·∫≠t: {datetime.now().strftime('%d/%m/%Y %H:%M')}
"""
            
            with open(filename, 'rb') as photo:
                await message.reply_photo(
                    photo=photo,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN
                )
            
            os.remove(filename)
            logger.info("Gauge sent successfully")
            
            # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
            await message.reply_text(
                "‚úÖ **Ho√†n t·∫•t!** B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
                reply_markup=get_next_commands_keyboard(),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.reply_text("‚ùå Kh√¥ng th·ªÉ t·∫°o gauge chart.")
    
    except Exception as e:
        logger.error(f"Error in gauge execution: {e}", exc_info=True)
        await message.reply_text(f"‚ùå L·ªói: {str(e)}")


async def execute_report_logic(message):
    """Logic t·∫°o report - d√πng chung cho command v√† button"""
    try:
        logger.info("=== REPORT EXECUTION ===")
        if dashboard.fetch_data(limit=90):
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            report_file = os.path.join(Config.REPORTS_DIR, f"report_{timestamp}.png")
            data_file = os.path.join(Config.DATA_DIR, f"data_{timestamp}.csv")
            
            dashboard.create_full_report(save_path=report_file)
            dashboard.data.to_csv(data_file, index=False)
            
            caption = f"""
üìä **B√ÅO C√ÅO CH·ªà S·ªê T√ÇM L√ù TH·ªä TR∆Ø·ªúNG**

**Hi·ªán t·∫°i:** {dashboard.current_value} - {dashboard.current_classification}
**C·∫≠p nh·∫≠t:** {datetime.now().strftime('%d/%m/%Y %H:%M')}

{get_interpretation(dashboard.current_value)}
"""
            
            with open(report_file, 'rb') as photo:
                await message.reply_photo(
                    photo=photo,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN
                )
            
            with open(data_file, 'rb') as document:
                await message.reply_document(
                    document=document,
                    filename=f"fear_greed_data_{datetime.now().strftime('%Y%m%d')}.csv",
                    caption="üìÑ D·ªØ li·ªáu th√¥ (CSV)"
                )
            
            os.remove(report_file)
            os.remove(data_file)
            logger.info("Report sent successfully")
            
            # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
            await message.reply_text(
                "‚úÖ **Ho√†n t·∫•t!** B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
                reply_markup=get_next_commands_keyboard(),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.reply_text("‚ùå Kh√¥ng th·ªÉ t·∫°o b√°o c√°o.")
    
    except Exception as e:
        logger.error(f"Error in report execution: {e}", exc_info=True)
        await message.reply_text(f"‚ùå L·ªói: {str(e)}")


async def execute_signal_logic(message):
    """Logic ph√¢n t√≠ch t√≠n hi·ªáu - d√πng chung cho command v√† button"""
    try:
        if dashboard.fetch_data(limit=30):
            value = dashboard.current_value
            avg_7 = dashboard.data.tail(7)['value'].mean()
            avg_30 = dashboard.data.tail(30)['value'].mean()
            
            if value <= 25:
                signal = "üü¢ MUA M·∫†NH"
                reason = "Extreme Fear - Th·ªã tr∆∞·ªùng qu√° bi quan"
                action = "C∆° h·ªôi t√≠ch l≈©y t·ªët"
            elif value <= 40:
                signal = "üü¢ MUA"
                reason = "Fear - T√¢m l√Ω th·∫≠n tr·ªçng"
                action = "C√≥ th·ªÉ b·∫Øt ƒë·∫ßu mua DCA"
            elif value <= 60:
                signal = "üü° GI·ªÆ"
                reason = "Neutral - Th·ªã tr∆∞·ªùng c√¢n b·∫±ng"
                action = "Quan s√°t th√™m"
            elif value <= 75:
                signal = "üî¥ CH·ªêT L·ªúI B·ªò PH·∫¨N"
                reason = "Greed - T√¢m l√Ω l·∫°c quan"
                action = "N√™n ch·ªët l·ªùi 20-30%"
            else:
                signal = "üî¥ B√ÅN"
                reason = "Extreme Greed - FOMO ƒëang lan t·ªèa"
                action = "N√™n ch·ªët l·ªùi m·∫°nh"
            
            response = f"""
üéØ **T√çN HI·ªÜU GIAO D·ªäCH**

**Ch·ªâ s·ªë hi·ªán t·∫°i:** {value}
**T√≠n hi·ªáu:** {signal}

**Ph√¢n t√≠ch:**
‚Ä¢ L√Ω do: {reason}
‚Ä¢ H√†nh ƒë·ªông: {action}

**Xu h∆∞·ªõng:**
‚Ä¢ Trung b√¨nh 7 ng√†y: {avg_7:.1f}
‚Ä¢ Trung b√¨nh 30 ng√†y: {avg_30:.1f}
‚Ä¢ Xu h∆∞·ªõng: {'üìà TƒÉng' if value > avg_7 else 'üìâ Gi·∫£m'}

‚ö†Ô∏è **L∆∞u √Ω:** ƒê√¢y ch·ªâ l√† t√≠n hi·ªáu tham kh·∫£o.
"""
            
            await message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            logger.info(f"Signal analysis sent: {signal}")
            
            # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
            await message.reply_text(
                "‚úÖ **Ho√†n t·∫•t!** B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
                reply_markup=get_next_commands_keyboard(),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.reply_text("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch t√≠n hi·ªáu.")
    
    except Exception as e:
        logger.error(f"Error in signal execution: {e}", exc_info=True)
        await message.reply_text(f"‚ùå L·ªói: {str(e)}")


async def execute_stats_logic(message, days=90):
    """Logic th·ªëng k√™ - d√πng chung cho command v√† button"""
    try:
        if dashboard.fetch_data(limit=days):
            df = dashboard.data
            stats = df['value'].describe()
            
            # S·ª¨ D·ª§NG C·ªòT TI·∫æNG VI·ªÜT
            counts = df['value_classification_vi'].value_counts()
            
            response = f"""
üìä **TH·ªêNG K√ä {days} NG√ÄY**

**Ch·ªâ s·ªë:**
‚Ä¢ Trung b√¨nh: {stats['mean']:.1f}
‚Ä¢ Trung v·ªã: {stats['50%']:.1f}
‚Ä¢ ƒê·ªô l·ªách chu·∫©n: {stats['std']:.1f}
‚Ä¢ Th·∫•p nh·∫•t: {stats['min']:.0f}
‚Ä¢ Cao nh·∫•t: {stats['max']:.0f}

**Ph√¢n ph·ªëi:**
"""
            for classification, count in counts.items():
                percentage = (count / len(df)) * 100
                response += f"‚Ä¢ {classification}: {count} ng√†y ({percentage:.1f}%)\n"
            
            await message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            logger.info(f"Stats sent for {days} days")
            
            # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
            await message.reply_text(
                "‚úÖ **Ho√†n t·∫•t!** B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
                reply_markup=get_next_commands_keyboard(),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.reply_text("‚ùå Kh√¥ng th·ªÉ t√≠nh th·ªëng k√™.")
    
    except Exception as e:
        logger.error(f"Error in stats execution: {e}", exc_info=True)
        await message.reply_text(f"‚ùå L·ªói: {str(e)}")


async def execute_schedule_info(message):
    """Hi·ªÉn th·ªã th√¥ng tin l·ªãch - d√πng chung cho command v√† button"""
    try:
        jobs = scheduler.get_jobs()
        status = "üü¢ ƒêang b·∫≠t" if jobs else "üî¥ ƒêang t·∫Øt"
        
        response = f"""
‚è∞ **L·ªäCH G·ª¨I T·ª∞ ƒê·ªòNG**

**Tr·∫°ng th√°i:** {status}
**S·ªë job:** {len(jobs)}

**Th·ªùi gian g·ª≠i:**
"""
        for time in Config.SCHEDULE_TIMES:
            response += f"‚Ä¢ {time}\n"
        
        response += "\n**L·ªánh:**\n"
        response += "‚Ä¢ `/schedule on` - B·∫≠t l·ªãch\n"
        response += "‚Ä¢ `/schedule off` - T·∫Øt l·ªãch\n"
        
        await message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
        
        # Th√™m g·ª£i √Ω l·ªánh ti·∫øp theo
        await message.reply_text(
            "‚úÖ B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?",
            reply_markup=get_next_commands_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Error in schedule info: {e}", exc_info=True)
        await message.reply_text(f"‚ùå L·ªói: {str(e)}")


async def send_scheduled_report(context: ContextTypes.DEFAULT_TYPE):
    """G·ª≠i b√°o c√°o theo l·ªãch"""
    logger.info("Sending scheduled report...")
    try:
        await send_to_group(context)
    except Exception as e:
        logger.error(f"Error sending scheduled report: {e}")


async def send_to_group(context: ContextTypes.DEFAULT_TYPE):
    """G·ª≠i b√°o c√°o v√†o nh√≥m"""
    if Config.GROUP_CHAT_ID == 'YOUR_GROUP_ID':
        logger.warning("Group chat ID not configured")
        return
    
    try:
        if dashboard.fetch_data(limit=90):
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            report_file = os.path.join(Config.REPORTS_DIR, f"report_{timestamp}.png")
            
            dashboard.create_full_report(save_path=report_file)
            
            caption = f"""
üìä **B√ÅO C√ÅO CH·ªà S·ªê T√ÇM L√ù TH·ªä TR∆Ø·ªúNG**
‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M')}

**Hi·ªán t·∫°i:** {dashboard.current_value} - {dashboard.current_classification}

{get_interpretation(dashboard.current_value)}

#FearGreed #Crypto #Analysis
"""
            
            with open(report_file, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=Config.GROUP_CHAT_ID,
                    photo=photo,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN
                )
            
            os.remove(report_file)
            logger.info("Report sent to group successfully")
    
    except Exception as e:
        logger.error(f"Error sending to group: {e}")


def setup_schedule(context: ContextTypes.DEFAULT_TYPE):
    """Thi·∫øt l·∫≠p l·ªãch g·ª≠i t·ª± ƒë·ªông"""
    scheduler.remove_all_jobs()
    
    for time_str in Config.SCHEDULE_TIMES:
        hour, minute = map(int, time_str.split(':'))
        scheduler.add_job(
            send_scheduled_report,
            trigger=CronTrigger(hour=hour, minute=minute),
            args=[context],
            id=f'report_{time_str}',
            replace_existing=True
        )
    
    logger.info(f"Scheduled {len(Config.SCHEDULE_TIMES)} jobs")


def get_next_commands_keyboard():
    """T·∫°o keyboard g·ª£i √Ω c√°c l·ªánh ti·∫øp theo"""
    keyboard = [
        [
            InlineKeyboardButton("üìä Gauge", callback_data='cmd_gauge'),
            InlineKeyboardButton("üìà Report", callback_data='cmd_report'),
            InlineKeyboardButton("üéØ Signal", callback_data='cmd_signal')
        ],
        [
            InlineKeyboardButton("üìâ Stats", callback_data='cmd_stats'),
            InlineKeyboardButton("‚è∞ Schedule", callback_data='cmd_schedule'),
            InlineKeyboardButton("‚ÑπÔ∏è Help", callback_data='cmd_help')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_emoji_for_value(value):
    """L·∫•y emoji d·ª±a tr√™n gi√° tr·ªã"""
    if value <= 25:
        return "üò±"
    elif value <= 45:
        return "üò∞"
    elif value <= 55:
        return "üòê"
    elif value <= 75:
        return "üòä"
    else:
        return "ü§ë"


def get_interpretation(value):
    """Gi·∫£i th√≠ch gi√° tr·ªã"""
    if value <= 25:
        return "üí° **S·ª£ H√£i C·ª±c ƒê·ªô** - Th·ªã tr∆∞·ªùng qu√° bi quan, c√≥ th·ªÉ l√† c∆° h·ªôi mua t·ªët!"
    elif value <= 45:
        return "üí° **S·ª£ H√£i** - Nh√† ƒë·∫ßu t∆∞ ƒëang th·∫≠n tr·ªçng, c√¢n nh·∫Øc t√≠ch l≈©y."
    elif value <= 55:
        return "üí° **Trung L·∫≠p** - Th·ªã tr∆∞·ªùng c√¢n b·∫±ng, quan s√°t th√™m."
    elif value <= 75:
        return "üí° **Tham Lam** - Th·ªã tr∆∞·ªùng l·∫°c quan, c√¢n nh·∫Øc ch·ªët l·ªùi b·ªô ph·∫≠n."
    else:
        return "üí° **Tham Lam C·ª±c ƒê·ªô** - FOMO ƒëang lan t·ªèa, c·∫©n th·∫≠n v·ªõi ƒëi·ªÅu ch·ªânh!"


async def send_bot_status(application, status: str):
    """G·ª≠i th√¥ng b√°o tr·∫°ng th√°i bot"""
    try:
        timestamp = datetime.now().strftime('%d/%m/%Y l√∫c %H:%M:%S')
        
        if status == "started":
            message = f"""
üü¢ **BOT ƒê√É KH·ªûI ƒê·ªòNG TH√ÄNH C√îNG**

‚è∞ **Th·ªùi gian:** {timestamp}
üìä **Tr·∫°ng th√°i:** ƒêang ho·∫°t ƒë·ªông
üîÑ **Scheduler:** ƒê√£ k√≠ch ho·∫°t

‚úÖ **Bot s·∫µn s√†ng nh·∫≠n l·ªánh!**

üìã **C√°c l·ªánh c√≥ s·∫µn:**
‚Ä¢ /current - Xem ch·ªâ s·ªë hi·ªán t·∫°i
‚Ä¢ /report - B√°o c√°o ƒë·∫ßy ƒë·ªß
‚Ä¢ /signal - T√≠n hi·ªáu giao d·ªãch
‚Ä¢ /schedule on - B·∫≠t g·ª≠i t·ª± ƒë·ªông

üí° G·ª≠i /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt.
"""
        elif status == "stopped":
            message = f"""
üî¥ **BOT ƒê√É D·ª™NG HO·∫†T ƒê·ªòNG**

‚è∞ **Th·ªùi gian:** {timestamp}
üìä **Tr·∫°ng th√°i:** ƒê√£ t·∫Øt

‚ö†Ô∏è Bot kh√¥ng c√≤n ho·∫°t ƒë·ªông n·ªØa.
"""
        else:
            message = f"‚ÑπÔ∏è **{status}** - {timestamp}"
        
        # G·ª≠i cho owner
        await application.bot.send_message(
            chat_id=Config.OWNER_CHAT_ID,
            text=message,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # G·ª≠i v√†o group n·∫øu c√≥
        if Config.GROUP_CHAT_ID != 'YOUR_GROUP_ID':
            group_message = f"üîî **Th√¥ng b√°o:** Bot {status} l√∫c {timestamp}"
            await application.bot.send_message(
                chat_id=Config.GROUP_CHAT_ID,
                text=group_message,
                parse_mode=ParseMode.MARKDOWN
            )
        
        logger.info(f"Status notification sent: {status}")
    except Exception as e:
        logger.error(f"Error sending status: {e}")


async def post_init(application: Application):
    """Callback sau khi application kh·ªüi t·∫°o - start scheduler ·ªü ƒë√¢y"""
    scheduler.start()
    logger.info("Scheduler started successfully")
    
    # G·ª≠i th√¥ng b√°o bot ƒë√£ kh·ªüi ƒë·ªông
    await send_bot_status(application, "started")


def main():
    """Kh·ªüi ƒë·ªông bot"""
    print("=" * 60)
    print("ü§ñ CH·ªà S·ªê T√ÇM L√ù TH·ªä TR∆Ø·ªúNG TELEGRAM BOT")
    print("=" * 60)
    
    if not Config.validate_config():
        return
    
    # Kh√¥ng c·∫ßn g·ªçi l·∫°i v√¨ ƒë√£ g·ªçi ·ªü ƒë·∫ßu file
    # Config.create_directories()
    
    # T·∫°o application
    application = Application.builder().token(Config.BOT_TOKEN).build()
    
    # Th√™m handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("current", current_command))
    application.add_handler(CommandHandler("gauge", gauge_command))
    application.add_handler(CommandHandler("report", report_command))
    application.add_handler(CommandHandler("signal", signal_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("schedule", schedule_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Th√™m post_init callback ƒë·ªÉ start scheduler SAU KHI event loop ƒë√£ ch·∫°y
    application.post_init = post_init
    
    print("‚úÖ Bot ƒë√£ s·∫µn s√†ng!")
    print(f"üë§ Owner: {Config.OWNER_CHAT_ID}")
    print(f"üë• Group: {Config.GROUP_CHAT_ID}")
    print("\nüí¨ G·ª≠i /start cho bot ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
    print("‚è∞ Scheduler s·∫Ω kh·ªüi ƒë·ªông khi bot ch·∫°y")
    print("\nNh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng bot\n")
    
    # Ch·∫°y bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()