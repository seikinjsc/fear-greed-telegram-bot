"""
fear_greed_dashboard.py - Dashboard v·∫Ω bi·ªÉu ƒë·ªì Ch·ªâ B√°o T√¢m L√Ω (100% Ti·∫øng Vi·ªát)
"""

import requests
import pandas as pd
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Wedge, FancyBboxPatch
import numpy as np
from datetime import datetime, timedelta
import seaborn as sns
import matplotlib.dates as mdates

# C·∫•u h√¨nh font ti·∫øng Vi·ªát
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False

plt.style.use('dark_background')
sns.set_palette("husl")


class FearGreedDashboard:
    def __init__(self):
        self.base_url = "https://api.alternative.me/fng/"
        self.data = None
        self.current_value = None
        self.current_classification = None
        
        # B·∫£ng d·ªãch ti·∫øng Vi·ªát
        self.translations = {
            'Extreme Fear': 'S·ª£ H√£i C·ª±c ƒê·ªô',
            'Fear': 'S·ª£ H√£i',
            'Neutral': 'Trung L·∫≠p',
            'Greed': 'Tham Lam',
            'Extreme Greed': 'Tham Lam C·ª±c ƒê·ªô'
        }
        
    def translate(self, text):
        """D·ªãch sang ti·∫øng Vi·ªát"""
        return self.translations.get(text, text)
        
    def fetch_data(self, limit=90):
        """L·∫•y d·ªØ li·ªáu t·ª´ API"""
        try:
            response = requests.get(f"{self.base_url}?limit={limit}")
            data = response.json()
            
            if data['metadata']['error']:
                print("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu")
                return False
            
            df = pd.DataFrame(data['data'])
            df['value'] = df['value'].astype(int)
            df['timestamp'] = pd.to_datetime(df['timestamp'].astype(int), unit='s')
            df = df.sort_values('timestamp').reset_index(drop=True)
            
            # Th√™m c·ªôt ti·∫øng Vi·ªát
            df['value_classification_vi'] = df['value_classification'].map(self.translations)
            
            self.data = df
            self.current_value = df.iloc[-1]['value']
            self.current_classification = df.iloc[-1]['value_classification']
            self.current_classification_vi = self.translate(self.current_classification)
            
            print(f"‚úÖ ƒê√£ l·∫•y {len(df)} b·∫£n ghi")
            print(f"üìä Gi√° tr·ªã hi·ªán t·∫°i: {self.current_value} - {self.current_classification_vi}")
            
            return True
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
    
    def get_color_for_value(self, value):
        """L·∫•y m√†u gradient d·ª±a tr√™n gi√° tr·ªã"""
        if value <= 25:
            return '#d32f2f'
        elif value <= 45:
            return '#ff9800'
        elif value <= 55:
            return '#fdd835'
        elif value <= 75:
            return '#66bb6a'
        else:
            return '#2e7d32'
    
    def get_text_color_for_classification(self, classification_vi):
        """L·∫•y m√†u ch·ªØ d·ª±a tr√™n ph√¢n lo·∫°i"""
        colors = {
            'S·ª£ H√£i C·ª±c ƒê·ªô': '#ff5252',
            'S·ª£ H√£i': '#ffa726',
            'Trung L·∫≠p': '#ffeb3b',
            'Tham Lam': '#81c784',
            'Tham Lam C·ª±c ƒê·ªô': '#66bb6a'
        }
        return colors.get(classification_vi, '#ffffff')
    
    def draw_gauge_chart(self, ax):
        """V·∫Ω ƒë·ªìng h·ªì gauge"""
        value = self.current_value
        classification_vi = self.current_classification_vi
        
        ax.set_xlim(-1.2, 1.2)
        ax.set_ylim(-0.2, 1.2)
        ax.axis('off')
        
        # V·∫Ω n·ª≠a v√≤ng tr√≤n v·ªõi gradient m√†u
        segments = [
            (180, 145, '#d32f2f'),  # S·ª£ h√£i c·ª±c ƒë·ªô
            (145, 110, '#ff9800'),  # S·ª£ h√£i
            (110, 90, '#fdd835'),   # Trung l·∫≠p
            (90, 55, '#66bb6a'),    # Tham lam
            (55, 0, '#2e7d32')      # Tham lam c·ª±c ƒë·ªô
        ]
        
        for start, end, color in segments:
            wedge = Wedge(
                center=(0, 0),
                r=1,
                theta1=end,
                theta2=start,
                width=0.3,
                facecolor=color,
                edgecolor='none',
                alpha=0.8
            )
            ax.add_patch(wedge)
        
        # V√≤ng tr√≤n trong
        inner_circle = plt.Circle((0, 0), 0.7, color='#1a1a1a', zorder=10)
        ax.add_patch(inner_circle)
        
        # Kim ch·ªâ
        angle_rad = np.pi * (1 - value / 100)
        needle_length = 0.65
        needle_x = needle_length * np.cos(angle_rad)
        needle_y = needle_length * np.sin(angle_rad)
        
        ax.plot([0, needle_x], [0, needle_y], 
                color='white', linewidth=4, zorder=15)
        ax.plot([0, needle_x], [0, needle_y], 
                color=self.get_color_for_value(value), linewidth=2.5, zorder=16)
        
        # ƒêi·ªÉm tr√≤n gi·ªØa
        center_circle = plt.Circle((0, 0), 0.08, color='white', zorder=20)
        ax.add_patch(center_circle)
        
        # Hi·ªÉn th·ªã s·ªë - DI CHUY·ªÇN XU·ªêNG D∆Ø·ªöI V√Ä GI·∫¢M K√çCH TH∆Ø·ªöC
        ax.text(0, -0.25, f'{value}', 
                fontsize=52, fontweight='bold', ha='center', va='center',
                color='white', zorder=25)
        
        # Hi·ªÉn th·ªã ph√¢n lo·∫°i ti·∫øng Vi·ªát - PH√ìNG TO, T√î M√ÄU, IN ƒê·∫¨M
        text_color = self.get_text_color_for_classification(classification_vi)
        ax.text(0, -0.55, classification_vi, 
                fontsize=20, ha='center', va='center',
                color=text_color, zorder=25, fontweight='bold',
                bbox=dict(boxstyle='round,pad=0.4', 
                         facecolor='#1a1a1a', 
                         edgecolor=text_color,
                         linewidth=2.5, alpha=0.8))
        
        # Label ƒë·∫ßu cu·ªëi
        ax.text(-1.15, -0.1, '0', fontsize=13, color='#666666', ha='center')
        ax.text(1.15, -0.1, '100', fontsize=13, color='#666666', ha='center')
    
    def draw_stats_boxes(self, ax):
        """V·∫Ω c√°c √¥ th·ªëng k√™"""
        ax.axis('off')
        ax.set_xlim(0, 10)
        ax.set_ylim(0, 10)
        
        yesterday_value = self.data.iloc[-2]['value']
        yesterday_class_vi = self.translate(self.data.iloc[-2]['value_classification'])
        
        week_avg = self.data.tail(7)['value'].mean()
        # X√°c ƒë·ªãnh ph√¢n lo·∫°i tu·∫ßn tr∆∞·ªõc
        if week_avg <= 25:
            week_class_vi = 'S·ª£ H√£i C·ª±c ƒê·ªô'
        elif week_avg <= 45:
            week_class_vi = 'S·ª£ H√£i'
        elif week_avg <= 55:
            week_class_vi = 'Trung L·∫≠p'
        elif week_avg <= 75:
            week_class_vi = 'Tham Lam'
        else:
            week_class_vi = 'Tham Lam C·ª±c ƒê·ªô'
        
        # Box 1: H√¥m qua - GI·∫¢M K√çCH TH∆Ø·ªöC
        rect1 = FancyBboxPatch((0.5, 6.8), 4, 2.5, 
                               boxstyle="round,pad=0.15", 
                               facecolor='#2a2a2a', 
                               edgecolor='#404040',
                               linewidth=2)
        ax.add_patch(rect1)
        
        ax.text(2.5, 8.9, 'H√¥m Qua', 
                fontsize=12, ha='center', color='#999999', fontweight='bold')
        ax.text(2.5, 8.4, yesterday_class_vi, 
                fontsize=9, ha='center', color='#ffa726')
        ax.text(2.5, 7.5, f'{yesterday_value}', 
                fontsize=32, ha='center', color='white', fontweight='bold')
        
        # Box 2: Tu·∫ßn tr∆∞·ªõc - GI·∫¢M K√çCH TH∆Ø·ªöC
        rect2 = FancyBboxPatch((5.5, 6.8), 4, 2.5, 
                               boxstyle="round,pad=0.15", 
                               facecolor='#2a2a2a', 
                               edgecolor='#404040',
                               linewidth=2)
        ax.add_patch(rect2)
        
        ax.text(7.5, 8.9, 'Tu·∫ßn Tr∆∞·ªõc', 
                fontsize=12, ha='center', color='#999999', fontweight='bold')
        ax.text(7.5, 8.4, week_class_vi, 
                fontsize=9, ha='center', color='#66bb6a')
        ax.text(7.5, 7.5, f'{int(week_avg)}', 
                fontsize=32, ha='center', color='white', fontweight='bold')
        
        # C√¢u h·ªèi - TƒÇNG KHO·∫¢NG C√ÅCH
        ax.text(5, 6.0, 'Ban nghƒ© g√¨ v·ªÅ Bitcoin h√¥m nay?', 
                fontsize=12, ha='center', color='white', fontweight='bold')
        
        # N√∫t Gi·∫£m
        rect_down = FancyBboxPatch((1, 4.4), 3.5, 1.1, 
                                   boxstyle="round,pad=0.08", 
                                   facecolor='#d32f2f', 
                                   edgecolor='none')
        ax.add_patch(rect_down)
        ax.text(2.75, 5.0, 'üìâ Gi·∫£m Gi√°', 
                fontsize=13, ha='center', va='center', 
                color='white', fontweight='bold')
        
        # N√∫t TƒÉng
        rect_up = FancyBboxPatch((5.5, 4.4), 3.5, 1.1, 
                                 boxstyle="round,pad=0.08", 
                                 facecolor='#2e7d32', 
                                 edgecolor='none')
        ax.add_patch(rect_up)
        ax.text(7.25, 5.0, 'üìà TƒÉng Gi√°', 
                fontsize=13, ha='center', va='center', 
                color='white', fontweight='bold')
        
        # M√¥ t·∫£ - GI·∫¢M K√çCH TH∆Ø·ªöC V√Ä TƒÇNG KHO·∫¢NG C√ÅCH
        description = ("Ch·ªâ s·ªë dao ƒë·ªông t·ª´ 0 (S·ª£ h√£i t·ªëi ƒëa) ƒë·∫øn 100 (Tham lam c·ª±c ƒë·ªô). "
                      "Ph·∫£n √°nh t√¢m l√Ω v√† c·∫£m x√∫c c·ªßa nh√† ƒë·∫ßu t∆∞ crypto. "
                      "D·ªØ li·ªáu ƒë∆∞·ª£c t·ªïng h·ª£p t·ª´ nhi·ªÅu ngu·ªìn ƒë·ªÉ ph√¢n t√≠ch ch√≠nh x√°c xu h∆∞·ªõng th·ªã tr∆∞·ªùng.")
        
        ax.text(5, 2.5, description, 
                fontsize=8.5, ha='center', va='top', 
                color='#999999', wrap=True, 
                multialignment='center',
                bbox=dict(boxstyle='round,pad=0.5', 
                         facecolor='#1a1a1a', 
                         edgecolor='#333333',
                         linewidth=1.5))
    
    def draw_historical_chart(self, ax):
        """V·∫Ω bi·ªÉu ƒë·ªì l·ªãch s·ª≠"""
        df = self.data.tail(30).copy()
        colors = [self.get_color_for_value(v) for v in df['value']]
        
        # V·∫Ω ƒë∆∞·ªùng line
        ax.plot(df['timestamp'], df['value'], 
                color='white', linewidth=3, alpha=0.9, zorder=10)
        
        # T√¥ v√πng d∆∞·ªõi ƒë∆∞·ªùng
        ax.fill_between(df['timestamp'], df['value'], 0, 
                        alpha=0.3, color='#3f51b5')
        
        # V·∫Ω c√°c ƒëi·ªÉm
        scatter = ax.scatter(df['timestamp'], df['value'], 
                           c=colors, s=80, zorder=15, 
                           edgecolors='white', linewidths=2)
        
        ax.set_facecolor('#1a1a1a')
        ax.set_xlabel('Ng√†y Th√°ng', fontsize=13, color='#999999', labelpad=12)
        ax.set_ylabel('Ch·ªâ S·ªë T√¢m L√Ω', fontsize=13, color='#999999', labelpad=12)
        ax.set_title('L·ªãch S·ª≠ 30 Ng√†y G·∫ßn Nh·∫•t', 
                    fontsize=15, color='white', fontweight='bold', pad=15)
        
        # Grid
        ax.grid(True, alpha=0.15, linestyle='--', linewidth=0.5)
        ax.set_ylim(0, 100)
        
        # V√πng m√†u n·ªÅn
        ax.axhspan(0, 25, alpha=0.08, color='#d32f2f', zorder=1)
        ax.axhspan(25, 45, alpha=0.08, color='#ff9800', zorder=1)
        ax.axhspan(45, 55, alpha=0.08, color='#fdd835', zorder=1)
        ax.axhspan(55, 75, alpha=0.08, color='#66bb6a', zorder=1)
        ax.axhspan(75, 100, alpha=0.08, color='#2e7d32', zorder=1)
        
        # Label ti·∫øng Vi·ªát cho c√°c v√πng - GI·∫¢M K√çCH TH∆Ø·ªöC
        ax.text(df['timestamp'].iloc[1], 12, 'S·ª£ H√£i C·ª±c ƒê·ªô', 
                fontsize=8, color='#d32f2f', alpha=0.7, fontweight='bold')
        ax.text(df['timestamp'].iloc[1], 35, 'S·ª£ H√£i', 
                fontsize=8, color='#ff9800', alpha=0.7, fontweight='bold')
        ax.text(df['timestamp'].iloc[1], 50, 'Trung L·∫≠p', 
                fontsize=8, color='#fdd835', alpha=0.7, fontweight='bold')
        ax.text(df['timestamp'].iloc[1], 65, 'Tham Lam', 
                fontsize=8, color='#66bb6a', alpha=0.7, fontweight='bold')
        ax.text(df['timestamp'].iloc[1], 87, 'Tham Lam C·ª±c ƒê·ªô', 
                fontsize=8, color='#2e7d32', alpha=0.7, fontweight='bold')
        
        # Format tr·ª•c X - GI·∫¢M S·ªê LABELS V√Ä TƒÇNG ROTATION
        ax.xaxis.set_major_locator(mdates.DayLocator(interval=4))  # Thay ƒë·ªïi t·ª´ 3 th√†nh 4
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m'))
        
        plt.setp(ax.xaxis.get_majorticklabels(), 
                rotation=60, ha='right', fontsize=10)  # TƒÉng rotation t·ª´ 45 th√†nh 60
        
        ax.tick_params(colors='#666666', labelsize=10, length=6, width=1.5)
        
        for spine in ax.spines.values():
            spine.set_color('#333333')
            spine.set_linewidth(1.5)
    
    def create_full_report(self, save_path='bao_cao_tam_ly.png'):
        """T·∫°o b√°o c√°o ƒë·∫ßy ƒë·ªß"""
        # TƒÇNG K√çCH TH∆Ø·ªöC FIGURE
        fig = plt.figure(figsize=(24, 15), facecolor='#0d0d0d')
        
        # ƒêI·ªÄU CH·ªàNH SPACING
        gs = fig.add_gridspec(4, 2, 
                             height_ratios=[0.12, 0.8, 0.08, 1.2],
                             hspace=0.25, wspace=0.35,  # TƒÉng hspace v√† wspace
                             left=0.08, right=0.92, top=0.94, bottom=0.08)
        
        # Ti√™u ƒë·ªÅ ch√≠nh - GI·∫¢M K√çCH TH∆Ø·ªöC V√Ä DI CHUY·ªÇN XU·ªêNG
        fig.text(0.5, 0.975, 'CH·ªà S·ªê S·ª¢ H√ÉI V√Ä THAM LAM - TH·ªä TR∆Ø·ªúNG TI·ªÄN M√É H√ìA', 
                fontsize=22, fontweight='bold', ha='center', 
                color='white', va='top')
        
        # Th√¥ng tin c·∫≠p nh·∫≠t - TƒÇNG KHO·∫¢NG C√ÅCH
        fig.text(0.5, 0.945, 
                f'C·∫≠p nh·∫≠t: {datetime.now().strftime("%d/%m/%Y l√∫c %H:%M")} | ' + 
                f'Hi·ªán t·∫°i: {self.current_value} ƒëi·ªÉm - {self.current_classification_vi}',
                fontsize=12, ha='center', color='#999999', va='top')
        
        # V·∫Ω gauge
        ax1 = fig.add_subplot(gs[1, 0])
        self.draw_gauge_chart(ax1)
        
        # V·∫Ω stats boxes
        ax2 = fig.add_subplot(gs[1, 1])
        self.draw_stats_boxes(ax2)
        
        # V·∫Ω bi·ªÉu ƒë·ªì l·ªãch s·ª≠
        ax3 = fig.add_subplot(gs[3, :])
        self.draw_historical_chart(ax3)
        
        # TƒÇNG DPI ƒê·ªÇ CH·ªÆ R√ï H∆†N
        plt.savefig(save_path, dpi=180, facecolor='#0d0d0d', 
                   edgecolor='none', bbox_inches='tight', pad_inches=0.3)
        print(f"\n‚úÖ ƒê√£ l∆∞u b√°o c√°o: {save_path}")
        plt.close()
    
    def create_simple_gauge(self, save_path='dong_ho_tam_ly.png'):
        """T·∫°o gauge ƒë∆°n gi·∫£n"""
        fig, ax = plt.subplots(figsize=(10, 6), facecolor='#0d0d0d')
        self.draw_gauge_chart(ax)
        
        # GI·∫¢M K√çCH TH∆Ø·ªöC V√Ä TƒÇNG KHO·∫¢NG C√ÅCH
        fig.text(0.5, 0.92, 'Ch·ªâ S·ªë S·ª£ H√£i & Tham Lam', 
                fontsize=18, fontweight='bold', ha='center', 
                color='white', va='top')
        fig.text(0.5, 0.87, f'{self.current_classification_vi} - {self.current_value} ƒëi·ªÉm', 
                fontsize=13, ha='center', color='#999999', va='top')
        
        plt.savefig(save_path, dpi=150, facecolor='#0d0d0d', 
                   edgecolor='none', bbox_inches='tight', pad_inches=0.2)
        print(f"‚úÖ ƒê√£ l∆∞u ƒë·ªìng h·ªì: {save_path}")
        plt.close()


if __name__ == "__main__":
    print("=" * 60)
    print("CH·ªà S·ªê S·ª¢ H√ÉI & THAM LAM - KI·ªÇM TRA")
    print("=" * 60)
    
    dashboard = FearGreedDashboard()
    
    print("\nüî• ƒêang l·∫•y d·ªØ li·ªáu t·ª´ API...")
    if dashboard.fetch_data(limit=90):
        print("\nüé® ƒêang t·∫°o b√°o c√°o...")
        dashboard.create_full_report('test_bao_cao.png')
        dashboard.create_simple_gauge('test_dong_ho.png')
        print("\n‚úÖ Ki·ªÉm tra th√†nh c√¥ng!")