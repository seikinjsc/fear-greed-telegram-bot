"""
setup_venv.py - T·∫°o m√¥i tr∆∞·ªùng ·∫£o v√† c√†i ƒë·∫∑t th∆∞ vi·ªán
Ch·∫°y l·ªánh: python setup_venv.py
"""

import subprocess
import sys
import os
import platform

VENV_NAME = "venv_chi_bao_tam_ly"

REQUIRED_PACKAGES = [
    'python-dotenv==1.0.0',
    'python-telegram-bot==22.5',
    'APScheduler==3.11.0',
    'requests==2.31.0',
    'pandas==2.3.3',
    'matplotlib==3.10.6',
    'seaborn==0.13.2',
    'numpy==2.2.6',
]

def print_header(text):
    print("\n" + "=" * 70)
    print(f" {text}")
    print("=" * 70 + "\n")

def run_command(command, description):
    print(f"‚è≥ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Th√†nh c√¥ng!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Th·∫•t b·∫°i!")
        print(f"   L·ªói: {e.stderr}")
        return False

def check_venv_exists():
    return os.path.exists(VENV_NAME)

def create_virtual_environment():
    print_header("üîß T·∫†O M√îI TR∆Ø·ªúNG ·∫¢O")
    
    if check_venv_exists():
        print(f"‚ö†Ô∏è  M√¥i tr∆∞·ªùng ·∫£o \'{VENV_NAME}\' ƒë√£ t·ªìn t·∫°i!")
        print(f"‚ùì B·∫°n c√≥ mu·ªën x√≥a v√† t·∫°o l·∫°i kh√¥ng? (y/n): ", end='')
        choice = input().strip().lower()
        
        if choice == 'y' or choice == 'yes':
            print(f"\nüóëÔ∏è  ƒêang x√≥a m√¥i tr∆∞·ªùng ·∫£o c≈©...")
            if platform.system() == "Windows":
                run_command(f'rmdir /s /q {VENV_NAME}', 'X√≥a m√¥i tr∆∞·ªùng ·∫£o')
            else:
                run_command(f'rm -rf {VENV_NAME}', 'X√≥a m√¥i tr∆∞·ªùng ·∫£o')
        else:
            print("\n‚úÖ Gi·ªØ nguy√™n m√¥i tr∆∞·ªùng ·∫£o hi·ªán t·∫°i")
            return True
    
    python_cmd = sys.executable
    success = run_command(f'\"{python_cmd}\" -m venv {VENV_NAME}', f'T·∫°o m√¥i tr∆∞·ªùng ·∫£o {VENV_NAME}')
    
    if success:
        print(f"\n‚ú® M√¥i tr∆∞·ªùng ·∫£o \'{VENV_NAME}\' ƒë√£ ƒë∆∞·ª£c t·∫°o!")
    
    return success

def get_pip_command():
    if platform.system() == "Windows":
        return os.path.join(VENV_NAME, "Scripts", "pip.exe")
    else:
        return os.path.join(VENV_NAME, "bin", "pip")

def upgrade_pip():
    print_header("üì¶ N√ÇNG C·∫§P PIP")
    pip_cmd = get_pip_command()
    success = run_command(f'\"{pip_cmd}\" install --upgrade pip', 'N√¢ng c·∫•p pip')
    return success

def install_packages():
    print_header("üìö C√ÄI ƒê·∫∂T TH∆Ø VI·ªÜN")
    
    pip_cmd = get_pip_command()
    
    print(f"üìã Danh s√°ch {len(REQUIRED_PACKAGES)} th∆∞ vi·ªán:")
    for pkg in REQUIRED_PACKAGES:
        print(f"   ‚Ä¢ {pkg}")
    print()
    
    success_count = 0
    fail_count = 0
    failed_packages = []
    
    for i, package in enumerate(REQUIRED_PACKAGES, 1):
        pkg_name = package.split('==')[0]
        print(f"[{i}/{len(REQUIRED_PACKAGES)}] ƒêang c√†i {pkg_name}...", end=' ')
        
        result = subprocess.run(f'\"{pip_cmd}\" install {package}', shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ")
            success_count += 1
        else:
            print("‚ùå")
            fail_count += 1
            failed_packages.append(package)
    
    print(f"\nüìä K·∫øt qu·∫£:")
    print(f"   ‚úÖ Th√†nh c√¥ng: {success_count}/{len(REQUIRED_PACKAGES)}")
    print(f"   ‚ùå Th·∫•t b·∫°i: {fail_count}/{len(REQUIRED_PACKAGES)}")
    
    if failed_packages:
        print(f"\n‚ö†Ô∏è  C√°c package th·∫•t b·∫°i:")
        for pkg in failed_packages:
            print(f"   ‚Ä¢ {pkg}")
    
    return fail_count == 0

def create_activation_scripts():
    print_header("üìù T·∫†O SCRIPT K√çCH HO·∫†T")
    
    activate_bat = f"""@echo off
echo ================================
echo KICH HOAT MOI TRUONG AO
echo ================================
echo.
call {VENV_NAME}\\Scripts\\activate.bat
echo.
echo Mo truong ao da duoc kich hoat!
echo.
echo Cac lenh co san:
echo    python telegram_bot.py  - Chay bot
echo    python config.py        - Kiem tra cau hinh
echo    deactivate              - Tat moi truong ao
echo.
"""
    
    with open('ACTIVATE.bat', 'w', encoding='utf-8') as f:
        f.write(activate_bat)
    
    print("‚úÖ ƒê√£ t·∫°o: ACTIVATE.bat (Windows)")
    
    activate_sh = f"""#!/bin/bash
echo "================================"
echo "K√çCH HO·∫†T M√îI TR∆Ø·ªúNG ·∫¢O"
echo "================================"
echo ""
source {VENV_NAME}/bin/activate
echo ""
echo "‚úÖ M√¥i tr∆∞·ªùng ·∫£o ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!"
echo ""
exec $SHELL
"""
    
    with open('activate.sh', 'w', encoding='utf-8') as f:
        f.write(activate_sh)
    
    if platform.system() != "Windows":
        os.chmod('activate.sh', 0o755)
    
    print("‚úÖ ƒê√£ t·∫°o: activate.sh (Linux/Mac)")
    
    run_bot_bat = f"""@echo off
echo ================================
echo FEAR ^& GREED INDEX BOT
echo ================================
echo.
echo Dang khoi dong bot voi moi truong ao...
echo.
call {VENV_NAME}\\Scripts\\activate.bat
python telegram_bot.py
pause
"""
    
    with open('RUN_BOT.bat', 'w', encoding='utf-8') as f:
        f.write(run_bot_bat)
    
    print("‚úÖ ƒê√£ t·∫°o: RUN_BOT.bat")
    
    run_bot_sh = f"""#!/bin/bash
echo "================================"
echo "FEAR & GREED INDEX BOT"
echo "================================"
echo ""
source {VENV_NAME}/bin/activate
python telegram_bot.py
"""
    
    with open('run_bot.sh', 'w', encoding='utf-8') as f:
        f.write(run_bot_sh)
    
    if platform.system() != "Windows":
        os.chmod('run_bot.sh', 0o755)
    
    print("‚úÖ ƒê√£ t·∫°o: run_bot.sh")

def create_requirements_txt():
    print_header("üìÑ T·∫†O REQUIREMENTS.TXT")
    
    with open('requirements.txt', 'w', encoding='utf-8') as f:
        for package in REQUIRED_PACKAGES:
            f.write(package + '\n')
    
    print("‚úÖ ƒê√£ t·∫°o: requirements.txt")

def main():
    print("\n" + "=" * 70)
    print(" üöÄ THI·∫æT L·∫¨P M√îI TR∆Ø·ªúNG ·∫¢O - CH·ªà B√ÅO T√ÇM L√ù BOT")
    print("=" * 70)
    print()
    print(f"üìç Th∆∞ m·ª•c: {os.getcwd()}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üíª OS: {platform.system()}")
    print(f"üì¶ Venv: {VENV_NAME}")
    print()
    
    if not create_virtual_environment():
        print("\n‚ùå Kh√¥ng th·ªÉ t·∫°o m√¥i tr∆∞·ªùng ·∫£o!")
        return False
    
    if not upgrade_pip():
        print("\n‚ö†Ô∏è  Kh√¥ng th·ªÉ n√¢ng c·∫•p pip, nh∆∞ng v·∫´n ti·∫øp t·ª•c...")
    
    if not install_packages():
        print("\n‚ö†Ô∏è  M·ªôt s·ªë th∆∞ vi·ªán c√†i ƒë·∫∑t th·∫•t b·∫°i!")
    
    create_requirements_txt()
    create_activation_scripts()
    
    print("\n" + "=" * 70)
    print(" ‚úÖ HO√ÄN T·∫§T!")
    print("=" * 70)
    print()
    print("üìã C√ÅC B∆Ø·ªöC TI·∫æP THEO:")
    print("1Ô∏è‚É£  Ch·ªânh s·ª≠a file .env")
    if platform.system() == "Windows":
        print("2Ô∏è‚É£  Double-click RUN_BOT.bat")
    else:
        print("2Ô∏è‚É£  Ch·∫°y: ./run_bot.sh")
    print()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  ƒê√£ h·ªßy")
        sys.exit(0)
    except Exception as e:
        print(f"\n\n‚ùå L·ªói: {e}")
        sys.exit(1)
